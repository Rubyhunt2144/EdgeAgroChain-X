[
  {
    "id": "edgeagrochain_tab",
    "type": "tab",
    "label": "EdgeAgroChain-X System",
    "disabled": false,
    "info": "Complete agricultural monitoring system with sensors, decision engine, and actuators"
  },
  {
    "id": "soil_sensor",
    "type": "inject",
    "z": "edgeagrochain_tab",
    "name": "Soil Moisture Sensor",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "soil",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 100,
    "wires": [["soil_function"]]
  },
  {
    "id": "soil_function",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Generate Soil Data",
    "func": "// Generate realistic soil moisture data with EMA smoothing\nconst min = 30;\nconst max = 80;\nconst variance = 5;\n\n// Get previous value from context or initialize\nlet prevValue = context.get('prevValue') || 55;\n\n// Generate new value with random walk\nconst randomChange = (Math.random() - 0.5) * variance * 2;\nconst targetValue = prevValue + randomChange;\n\n// Apply EMA smoothing (alpha = 0.3)\nconst emaAlpha = 0.3;\nconst smoothedValue = emaAlpha * targetValue + (1 - emaAlpha) * prevValue;\n\n// Clamp to min/max\nconst value = Math.max(min, Math.min(max, smoothedValue));\n\n// Store for next iteration\ncontext.set('prevValue', value);\n\n// Determine status\nlet status = 'optimal';\nif (value < 40 || value > 70) {\n    status = value < 35 || value > 75 ? 'critical' : 'warning';\n}\n\nmsg.payload = {\n    sensor: 'Soil Moisture',\n    value: Math.round(value * 10) / 10,\n    unit: '%',\n    status: status,\n    timestamp: new Date().toISOString(),\n    optimal: { min: 40, max: 70 }\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 100,
    "wires": [["soil_gauge", "decision_engine", "csv_logger"]]
  },
  {
    "id": "soil_gauge",
    "type": "ui_gauge",
    "z": "edgeagrochain_tab",
    "name": "Soil Moisture Donut",
    "group": "sensors_group",
    "order": 1,
    "width": 4,
    "height": 4,
    "gtype": "donut",
    "title": "Soil Moisture",
    "label": "%",
    "format": "{{value}}",
    "min": 0,
    "max": "100",
    "colors": ["#ef4444", "#f59e0b", "#10b981", "#f59e0b", "#ef4444"],
    "seg1": "35",
    "seg2": "40",
    "seg3": "70",
    "seg4": "75",
    "diff": false,
    "className": "",
    "x": 600,
    "y": 80,
    "wires": []
  },
  {
    "id": "temp_sensor",
    "type": "inject",
    "z": "edgeagrochain_tab",
    "name": "Temperature Sensor",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "temperature",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 180,
    "wires": [["temp_function"]]
  },
  {
    "id": "temp_function",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Generate Temperature Data",
    "func": "// Generate realistic temperature data\nconst min = 15;\nconst max = 40;\nconst variance = 2;\n\nlet prevValue = context.get('prevValue') || 24;\nconst randomChange = (Math.random() - 0.5) * variance * 2;\nconst targetValue = prevValue + randomChange;\n\nconst emaAlpha = 0.3;\nconst smoothedValue = emaAlpha * targetValue + (1 - emaAlpha) * prevValue;\nconst value = Math.max(min, Math.min(max, smoothedValue));\n\ncontext.set('prevValue', value);\n\nlet status = 'optimal';\nif (value < 18 || value > 28) {\n    status = value < 15 || value > 32 ? 'critical' : 'warning';\n}\n\nmsg.payload = {\n    sensor: 'Temperature',\n    value: Math.round(value * 10) / 10,\n    unit: '°C',\n    status: status,\n    timestamp: new Date().toISOString(),\n    optimal: { min: 18, max: 28 }\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 180,
    "wires": [["temp_gauge", "decision_engine", "csv_logger"]]
  },
  {
    "id": "temp_gauge",
    "type": "ui_gauge",
    "z": "edgeagrochain_tab",
    "name": "Temperature Donut",
    "group": "sensors_group",
    "order": 2,
    "width": 4,
    "height": 4,
    "gtype": "donut",
    "title": "Temperature",
    "label": "°C",
    "format": "{{value}}",
    "min": 0,
    "max": "50",
    "colors": ["#3b82f6", "#10b981", "#10b981", "#f59e0b", "#ef4444"],
    "seg1": "15",
    "seg2": "18",
    "seg3": "28",
    "seg4": "32",
    "diff": false,
    "className": "",
    "x": 600,
    "y": 160,
    "wires": []
  },
  {
    "id": "humidity_sensor",
    "type": "inject",
    "z": "edgeagrochain_tab",
    "name": "Humidity Sensor",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "humidity",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 260,
    "wires": [["humidity_function"]]
  },
  {
    "id": "humidity_function",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Generate Humidity Data",
    "func": "// Generate realistic humidity data\nconst min = 30;\nconst max = 95;\nconst variance = 4;\n\nlet prevValue = context.get('prevValue') || 65;\nconst randomChange = (Math.random() - 0.5) * variance * 2;\nconst targetValue = prevValue + randomChange;\n\nconst emaAlpha = 0.3;\nconst smoothedValue = emaAlpha * targetValue + (1 - emaAlpha) * prevValue;\nconst value = Math.max(min, Math.min(max, smoothedValue));\n\ncontext.set('prevValue', value);\n\nlet status = 'optimal';\nif (value < 50 || value > 80) {\n    status = value < 40 || value > 85 ? 'critical' : 'warning';\n}\n\nmsg.payload = {\n    sensor: 'Humidity',\n    value: Math.round(value * 10) / 10,\n    unit: '%',\n    status: status,\n    timestamp: new Date().toISOString(),\n    optimal: { min: 50, max: 80 }\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 260,
    "wires": [["humidity_gauge", "decision_engine", "csv_logger"]]
  },
  {
    "id": "humidity_gauge",
    "type": "ui_gauge",
    "z": "edgeagrochain_tab",
    "name": "Humidity Donut",
    "group": "sensors_group",
    "order": 3,
    "width": 4,
    "height": 4,
    "gtype": "donut",
    "title": "Humidity",
    "label": "%",
    "format": "{{value}}",
    "min": 0,
    "max": "100",
    "colors": ["#ef4444", "#f59e0b", "#10b981", "#f59e0b", "#ef4444"],
    "seg1": "40",
    "seg2": "50",
    "seg3": "80",
    "seg4": "85",
    "diff": false,
    "className": "",
    "x": 600,
    "y": 240,
    "wires": []
  },
  {
    "id": "light_sensor",
    "type": "inject",
    "z": "edgeagrochain_tab",
    "name": "Light Sensor",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "light",
    "payload": "",
    "payloadType": "date",
    "x": 120,
    "y": 340,
    "wires": [["light_function"]]
  },
  {
    "id": "light_function",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Generate Light Data",
    "func": "// Generate realistic light intensity data\nconst min = 0;\nconst max = 1000;\nconst variance = 50;\n\nlet prevValue = context.get('prevValue') || 500;\nconst randomChange = (Math.random() - 0.5) * variance * 2;\nconst targetValue = prevValue + randomChange;\n\nconst emaAlpha = 0.3;\nconst smoothedValue = emaAlpha * targetValue + (1 - emaAlpha) * prevValue;\nconst value = Math.max(min, Math.min(max, smoothedValue));\n\ncontext.set('prevValue', value);\n\nlet status = 'optimal';\nif (value < 300 || value > 800) {\n    status = value < 200 || value > 900 ? 'critical' : 'warning';\n}\n\nmsg.payload = {\n    sensor: 'Light Intensity',\n    value: Math.round(value),\n    unit: 'lux',\n    status: status,\n    timestamp: new Date().toISOString(),\n    optimal: { min: 300, max: 800 }\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 340,
    "wires": [["light_gauge", "decision_engine", "csv_logger"]]
  },
  {
    "id": "light_gauge",
    "type": "ui_gauge",
    "z": "edgeagrochain_tab",
    "name": "Light Intensity Donut",
    "group": "sensors_group",
    "order": 4,
    "width": 4,
    "height": 4,
    "gtype": "donut",
    "title": "Light Intensity",
    "label": "lux",
    "format": "{{value}}",
    "min": 0,
    "max": "1000",
    "colors": ["#ef4444", "#f59e0b", "#10b981", "#f59e0b", "#ef4444"],
    "seg1": "200",
    "seg2": "300",
    "seg3": "800",
    "seg4": "900",
    "diff": false,
    "className": "",
    "x": 610,
    "y": 320,
    "wires": []
  },
  {
    "id": "co2_sensor",
    "type": "inject",
    "z": "edgeagrochain_tab",
    "name": "CO2 Sensor",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "co2",
    "payload": "",
    "payloadType": "date",
    "x": 120,
    "y": 420,
    "wires": [["co2_function"]]
  },
  {
    "id": "co2_function",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Generate CO2 Data",
    "func": "// Generate realistic CO2 level data\nconst min = 300;\nconst max = 1000;\nconst variance = 20;\n\nlet prevValue = context.get('prevValue') || 450;\nconst randomChange = (Math.random() - 0.5) * variance * 2;\nconst targetValue = prevValue + randomChange;\n\nconst emaAlpha = 0.3;\nconst smoothedValue = emaAlpha * targetValue + (1 - emaAlpha) * prevValue;\nconst value = Math.max(min, Math.min(max, smoothedValue));\n\ncontext.set('prevValue', value);\n\nlet status = 'optimal';\nif (value < 400 || value > 600) {\n    status = value < 350 || value > 700 ? 'critical' : 'warning';\n}\n\nmsg.payload = {\n    sensor: 'CO₂ Level',\n    value: Math.round(value),\n    unit: 'ppm',\n    status: status,\n    timestamp: new Date().toISOString(),\n    optimal: { min: 400, max: 600 }\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 420,
    "wires": [["co2_gauge", "decision_engine", "csv_logger"]]
  },
  {
    "id": "co2_gauge",
    "type": "ui_gauge",
    "z": "edgeagrochain_tab",
    "name": "CO2 Level Donut",
    "group": "sensors_group",
    "order": 5,
    "width": 4,
    "height": 4,
    "gtype": "donut",
    "title": "CO₂ Level",
    "label": "ppm",
    "format": "{{value}}",
    "min": "300",
    "max": "1000",
    "colors": ["#ef4444", "#f59e0b", "#10b981", "#f59e0b", "#ef4444"],
    "seg1": "350",
    "seg2": "400",
    "seg3": "600",
    "seg4": "700",
    "diff": false,
    "className": "",
    "x": 600,
    "y": 400,
    "wires": []
  },
  {
    "id": "water_sensor",
    "type": "inject",
    "z": "edgeagrochain_tab",
    "name": "Water Flow Sensor",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "3",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "water",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 500,
    "wires": [["water_function"]]
  },
  {
    "id": "water_function",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Generate Water Flow Data",
    "func": "// Generate realistic water flow data\nconst min = 0;\nconst max = 10;\nconst variance = 0.5;\n\nlet prevValue = context.get('prevValue') || 3;\nconst randomChange = (Math.random() - 0.5) * variance * 2;\nconst targetValue = prevValue + randomChange;\n\nconst emaAlpha = 0.3;\nconst smoothedValue = emaAlpha * targetValue + (1 - emaAlpha) * prevValue;\nconst value = Math.max(min, Math.min(max, smoothedValue));\n\ncontext.set('prevValue', value);\n\nlet status = 'optimal';\nif (value < 2 || value > 5) {\n    status = value < 1 || value > 6 ? 'critical' : 'warning';\n}\n\nmsg.payload = {\n    sensor: 'Water Flow',\n    value: Math.round(value * 10) / 10,\n    unit: 'L/min',\n    status: status,\n    timestamp: new Date().toISOString(),\n    optimal: { min: 2, max: 5 }\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 500,
    "wires": [["water_gauge", "decision_engine", "csv_logger"]]
  },
  {
    "id": "water_gauge",
    "type": "ui_gauge",
    "z": "edgeagrochain_tab",
    "name": "Water Flow Donut",
    "group": "sensors_group",
    "order": 6,
    "width": 4,
    "height": 4,
    "gtype": "donut",
    "title": "Water Flow",
    "label": "L/min",
    "format": "{{value}}",
    "min": 0,
    "max": "10",
    "colors": ["#ef4444", "#f59e0b", "#10b981", "#f59e0b", "#ef4444"],
    "seg1": "1",
    "seg2": "2",
    "seg3": "5",
    "seg4": "6",
    "diff": false,
    "className": "",
    "x": 600,
    "y": 480,
    "wires": []
  },
  {
    "id": "decision_engine",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "AI Decision Engine",
    "func": "// Collect sensor data and make intelligent decisions\nconst sensorData = context.get('sensorData') || {};\n\n// Store incoming sensor data\nif (msg.payload && msg.payload.sensor) {\n    sensorData[msg.payload.sensor] = msg.payload;\n    context.set('sensorData', sensorData);\n}\n\n// Only make decision if we have all sensor data\nconst requiredSensors = ['Soil Moisture', 'Temperature', 'Humidity', 'Light Intensity', 'CO₂ Level', 'Water Flow'];\nconst hasAllData = requiredSensors.every(sensor => sensorData[sensor]);\n\nif (!hasAllData) {\n    return null;\n}\n\n// Analyze sensor data and make decision\nconst criticalSensors = Object.values(sensorData).filter(s => s.status === 'critical');\nconst warningSensors = Object.values(sensorData).filter(s => s.status === 'warning');\n\nlet decision = {\n    timestamp: new Date().toISOString(),\n    issue: 'System Normal',\n    decision: 'Continue monitoring',\n    rationale: 'All sensors within acceptable ranges',\n    action: 'MAINTAIN',\n    severity: 'success',\n    confidence: 0.95,\n    sensorValues: {}\n};\n\n// Build sensor values summary\nObject.values(sensorData).forEach(sensor => {\n    decision.sensorValues[sensor.sensor] = `${sensor.value}${sensor.unit}`;\n});\n\n// Critical decision logic\nif (criticalSensors.length > 0) {\n    const sensor = criticalSensors[0];\n    decision.severity = 'critical';\n    decision.confidence = 0.88;\n    \n    if (sensor.sensor === 'Soil Moisture' && sensor.value < sensor.optimal.min) {\n        decision.issue = 'CRITICAL: Low Soil Moisture';\n        decision.decision = 'Activate irrigation immediately';\n        decision.rationale = `Soil moisture at ${sensor.value}% is critically below optimal range. Immediate irrigation required to prevent crop stress.`;\n        decision.action = 'AUTO_IRRIGATE_HIGH';\n        \n        // Trigger irrigation actuator\n        node.send([null, { payload: { actuator: 'irrigation', command: 'on', intensity: 80 } }]);\n    } else if (sensor.sensor === 'Temperature' && sensor.value > sensor.optimal.max) {\n        decision.issue = 'CRITICAL: High Temperature';\n        decision.decision = 'Activate cooling and ventilation';\n        decision.rationale = `Temperature at ${sensor.value}°C exceeds safe threshold. Risk of heat stress.`;\n        decision.action = 'AUTO_VENTILATION_HIGH';\n        \n        // Trigger ventilation actuator\n        node.send([null, { payload: { actuator: 'ventilation', command: 'on', intensity: 100 } }]);\n    } else if (sensor.sensor === 'CO₂ Level' && sensor.value > sensor.optimal.max) {\n        decision.issue = 'CRITICAL: High CO₂ Level';\n        decision.decision = 'Emergency ventilation';\n        decision.rationale = `CO₂ at ${sensor.value}ppm approaching dangerous levels. Immediate ventilation required.`;\n        decision.action = 'EMERGENCY_VENT';\n        \n        // Trigger emergency ventilation\n        node.send([null, { payload: { actuator: 'ventilation', command: 'on', intensity: 100 } }]);\n    }\n} else if (warningSensors.length > 0) {\n    const sensor = warningSensors[0];\n    decision.severity = 'warning';\n    decision.confidence = 0.82;\n    decision.issue = `WARNING: ${sensor.sensor} approaching limits`;\n    decision.decision = 'Prepare corrective measures';\n    decision.rationale = `${sensor.sensor} at ${sensor.value}${sensor.unit} is outside optimal range but not critical yet.`;\n    decision.action = 'STANDBY_MONITOR';\n}\n\nmsg.payload = decision;\n\n// Return decision to display and actuator control\nreturn [msg, null];",
    "outputs": 2,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 850,
    "y": 300,
    "wires": [["decision_display", "decision_csv"], ["actuator_controller"]]
  },
  {
    "id": "decision_display",
    "type": "ui_template",
    "z": "edgeagrochain_tab",
    "group": "decision_group",
    "name": "Decision Display",
    "order": 1,
    "width": 12,
    "height": 6,
    "format": "<div style=\"padding: 16px; background: #1a1a1a; border-radius: 8px; border: 1px solid #333;\">\n    <h3 style=\"color: #fff; margin-top: 0;\">🧠 AI Decision Engine</h3>\n    <div ng-if=\"msg.payload\" style=\"margin-top: 16px;\">\n        <div style=\"display: flex; gap: 16px; margin-bottom: 16px;\">\n            <div style=\"flex: 1; padding: 12px; background: #262626; border-radius: 6px; border-left: 4px solid {{msg.payload.severity === 'critical' ? '#ef4444' : msg.payload.severity === 'warning' ? '#f59e0b' : '#10b981'}};\">\n                <div style=\"color: #888; font-size: 12px; margin-bottom: 4px;\">ISSUE DETECTED</div>\n                <div style=\"color: #fff; font-size: 16px; font-weight: 600;\">{{msg.payload.issue}}</div>\n            </div>\n            <div style=\"padding: 12px; background: #262626; border-radius: 6px;\">\n                <div style=\"color: #888; font-size: 12px; margin-bottom: 4px;\">CONFIDENCE</div>\n                <div style=\"color: #3b82f6; font-size: 20px; font-weight: 700;\">{{(msg.payload.confidence * 100).toFixed(0)}}%</div>\n            </div>\n        </div>\n        \n        <div style=\"padding: 12px; background: #262626; border-radius: 6px; margin-bottom: 12px;\">\n            <div style=\"color: #888; font-size: 12px; margin-bottom: 8px;\">DECISION</div>\n            <div style=\"color: #fff; font-size: 14px; line-height: 1.6;\">{{msg.payload.decision}}</div>\n        </div>\n        \n        <div style=\"padding: 12px; background: #262626; border-radius: 6px; margin-bottom: 12px;\">\n            <div style=\"color: #888; font-size: 12px; margin-bottom: 8px;\">RATIONALE</div>\n            <div style=\"color: #aaa; font-size: 13px; line-height: 1.6;\">{{msg.payload.rationale}}</div>\n        </div>\n        \n        <div style=\"padding: 12px; background: #262626; border-radius: 6px;\">\n            <div style=\"color: #888; font-size: 12px; margin-bottom: 8px;\">ACTION TAKEN</div>\n            <div style=\"color: #10b981; font-family: monospace; font-size: 13px;\">{{msg.payload.action}}</div>\n        </div>\n        \n        <div style=\"margin-top: 12px; color: #666; font-size: 11px; text-align: right;\">\n            Last updated: {{msg.payload.timestamp | date:'HH:mm:ss'}}\n        </div>\n    </div>\n</div>",
    "storeOutMessages": false,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1100,
    "y": 280,
    "wires": [[]]
  },
  {
    "id": "actuator_controller",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Actuator Controller",
    "func": "// Control actuators based on decisions\nif (!msg.payload || !msg.payload.actuator) {\n    return null;\n}\n\nconst { actuator, command, intensity } = msg.payload;\n\nconst actuatorMsg = {\n    payload: {\n        name: actuator,\n        command: command,\n        intensity: intensity || 0,\n        timestamp: new Date().toISOString()\n    }\n};\n\n// Route to appropriate actuator\nif (actuator === 'irrigation') {\n    return [actuatorMsg, null, null, null];\n} else if (actuator === 'ventilation') {\n    return [null, actuatorMsg, null, null];\n} else if (actuator === 'lighting') {\n    return [null, null, actuatorMsg, null];\n} else if (actuator === 'heating') {\n    return [null, null, null, actuatorMsg];\n}\n\nreturn null;",
    "outputs": 4,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 400,
    "wires": [["irrigation_status"], ["ventilation_status"], ["lighting_status"], ["heating_status"]]
  },
  {
    "id": "irrigation_status",
    "type": "ui_text",
    "z": "edgeagrochain_tab",
    "group": "actuator_group",
    "order": 1,
    "width": 6,
    "height": 2,
    "name": "Irrigation Status",
    "label": "💧 Irrigation System",
    "format": "{{msg.payload.command === 'on' ? '✅ ACTIVE (' + msg.payload.intensity + '%)' : '⭕ STANDBY'}}",
    "layout": "row-spread",
    "className": "",
    "x": 1360,
    "y": 360,
    "wires": []
  },
  {
    "id": "ventilation_status",
    "type": "ui_text",
    "z": "edgeagrochain_tab",
    "group": "actuator_group",
    "order": 2,
    "width": 6,
    "height": 2,
    "name": "Ventilation Status",
    "label": "🌬️ Ventilation",
    "format": "{{msg.payload.command === 'on' ? '✅ ACTIVE (' + msg.payload.intensity + '%)' : '⭕ STANDBY'}}",
    "layout": "row-spread",
    "className": "",
    "x": 1360,
    "y": 400,
    "wires": []
  },
  {
    "id": "lighting_status",
    "type": "ui_text",
    "z": "edgeagrochain_tab",
    "group": "actuator_group",
    "order": 3,
    "width": 6,
    "height": 2,
    "name": "Lighting Status",
    "label": "💡 Grow Lights",
    "format": "{{msg.payload.command === 'on' ? '✅ ACTIVE (' + msg.payload.intensity + '%)' : '⭕ STANDBY'}}",
    "layout": "row-spread",
    "className": "",
    "x": 1350,
    "y": 440,
    "wires": []
  },
  {
    "id": "heating_status",
    "type": "ui_text",
    "z": "edgeagrochain_tab",
    "group": "actuator_group",
    "order": 4,
    "width": 6,
    "height": 2,
    "name": "Heating Status",
    "label": "🔥 Heating System",
    "format": "{{msg.payload.command === 'on' ? '✅ ACTIVE (' + msg.payload.intensity + '%)' : '⭕ STANDBY'}}",
    "layout": "row-spread",
    "className": "",
    "x": 1350,
    "y": 480,
    "wires": []
  },
  {
    "id": "csv_logger",
    "type": "join",
    "z": "edgeagrochain_tab",
    "name": "Collect Sensor Data",
    "mode": "custom",
    "build": "object",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": false,
    "timeout": "1",
    "count": "6",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "",
    "reduceFixup": "",
    "x": 620,
    "y": 600,
    "wires": [["csv_formatter"]]
  },
  {
    "id": "csv_formatter",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Format CSV Data",
    "func": "// Format data for CSV export\nconst timestamp = new Date().toISOString();\nconst sensors = msg.payload;\n\n// Get decision from context\nconst decision = context.get('lastDecision') || {\n    issue: 'Initializing',\n    decision: 'System starting',\n    rationale: 'Collecting initial data',\n    action: 'INIT'\n};\n\n// Build sensor values string\nconst sensorValues = Object.keys(sensors)\n    .map(key => `${key}: ${sensors[key].value}${sensors[key].unit}`)\n    .join(', ');\n\nmsg.payload = {\n    Time: timestamp,\n    Issue: decision.issue,\n    'Sensor Values': sensorValues,\n    Decision: decision.decision,\n    Rationale: decision.rationale,\n    Action: decision.action\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 850,
    "y": 600,
    "wires": [["csv_writer", "history_table"]]
  },
  {
    "id": "decision_csv",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Store Decision",
    "func": "// Store decision for CSV logging\ncontext.set('lastDecision', msg.payload);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 240,
    "wires": [[]]
  },
  {
    "id": "csv_writer",
    "type": "file",
    "z": "edgeagrochain_tab",
    "name": "Write to CSV",
    "filename": "/data/edgeagrochain-history.csv",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 1090,
    "y": 600,
    "wires": [[]]
  },
  {
    "id": "history_table",
    "type": "ui_table",
    "z": "edgeagrochain_tab",
    "group": "history_group",
    "name": "History Table",
    "order": 1,
    "width": 12,
    "height": 6,
    "columns": [
      {
        "field": "Time",
        "title": "Time",
        "width": "180px",
        "align": "left",
        "formatter": "plaintext",
        "formatterParams": {}
      },
      {
        "field": "Issue",
        "title": "Issue",
        "width": "200px",
        "align": "left",
        "formatter": "plaintext",
        "formatterParams": {}
      },
      {
        "field": "Sensor Values",
        "title": "Sensor Values",
        "width": "300px",
        "align": "left",
        "formatter": "plaintext",
        "formatterParams": {}
      },
      {
        "field": "Decision",
        "title": "Decision",
        "width": "200px",
        "align": "left",
        "formatter": "plaintext",
        "formatterParams": {}
      },
      {
        "field": "Rationale",
        "title": "Rationale",
        "width": "300px",
        "align": "left",
        "formatter": "plaintext",
        "formatterParams": {}
      },
      {
        "field": "Action",
        "title": "Action",
        "width": "150px",
        "align": "left",
        "formatter": "plaintext",
        "formatterParams": {}
      }
    ],
    "outputs": 0,
    "cts": false,
    "x": 1090,
    "y": 640,
    "wires": []
  },
  {
    "id": "export_button",
    "type": "ui_button",
    "z": "edgeagrochain_tab",
    "name": "Export CSV Button",
    "group": "history_group",
    "order": 2,
    "width": 3,
    "height": 1,
    "passthru": false,
    "label": "📥 Export CSV",
    "tooltip": "Download complete history as CSV file",
    "color": "",
    "bgcolor": "#3b82f6",
    "className": "",
    "icon": "fa-download",
    "payload": "export",
    "payloadType": "str",
    "topic": "export",
    "topicType": "str",
    "x": 140,
    "y": 700,
    "wires": [["export_handler"]]
  },
  {
    "id": "export_handler",
    "type": "function",
    "z": "edgeagrochain_tab",
    "name": "Handle Export",
    "func": "// Trigger CSV file download\nmsg.payload = {\n    filename: 'edgeagrochain-history.csv',\n    path: '/data/edgeagrochain-history.csv'\n};\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 700,
    "wires": [["download_file"]]
  },
  {
    "id": "download_file",
    "type": "file in",
    "z": "edgeagrochain_tab",
    "name": "Read CSV File",
    "filename": "/data/edgeagrochain-history.csv",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "utf8",
    "allProps": false,
    "x": 580,
    "y": 700,
    "wires": [[]]
  },
  {
    "id": "sensors_group",
    "type": "ui_group",
    "name": "Sensor Monitoring",
    "tab": "main_tab",
    "order": 1,
    "disp": true,
    "width": 12,
    "collapse": false,
    "className": ""
  },
  {
    "id": "decision_group",
    "type": "ui_group",
    "name": "AI Decision Engine",
    "tab": "main_tab",
    "order": 2,
    "disp": true,
    "width": 12,
    "collapse": false,
    "className": ""
  },
  {
    "id": "actuator_group",
    "type": "ui_group",
    "name": "Actuator Control",
    "tab": "main_tab",
    "order": 3,
    "disp": true,
    "width": 12,
    "collapse": false,
    "className": ""
  },
  {
    "id": "history_group",
    "type": "ui_group",
    "name": "Decision History",
    "tab": "main_tab",
    "order": 4,
    "disp": true,
    "width": 12,
    "collapse": false,
    "className": ""
  },
  {
    "id": "main_tab",
    "type": "ui_tab",
    "name": "EdgeAgroChain-X Dashboard",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  }
]
